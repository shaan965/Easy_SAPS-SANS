P = as.vector(prob),
Category = rep(1:ncol(prob), times = length(theta))
)
# Plot using ggplot2
ggplot(plot_data, aes(x = Theta, y = P, color = factor(Category))) +
geom_line() +
labs(title = paste("Item Response Curve for Item", item_index),
x = expression(theta),
y = expression(P(theta))) +
theme_minimal()
}
# Example usage: Generate plots for each item in the dataset
for (i in 1:ncol(data)) {
print(generate_grm_plot(model, i))
}
source("~/EASY-SAPS-SANS/app/model_testing.R", echo=TRUE)
# Function to generate the plot for a specific item
generate_grm_plot <- function(model, item_index) {
# Extract the item response curves
item_info <- coef(model, IRTpars = TRUE, simplify = TRUE)[[item_index]]
theta <- seq(-4, 4, length.out = 100)
prob <- probtrace(model, Theta = matrix(theta, ncol = 1))
print(prob)
# Debugging: Check the structure of `prob`
message("Item index: ", item_index)
message("Structure of prob: ")
print(str(prob))
# Ensure that prob is in the correct format
if (!is.matrix(prob[[item_index]])) {
stop("The probability trace is not a matrix. Check the probtrace function output.")
}
plot_data <- data.frame(
Theta = rep(theta, each = ncol(prob[[item_index]])),
P = as.vector(prob[[item_index]]),
Category = rep(1:ncol(prob[[item_index]]), times = length(theta))
)
# Plot using ggplot2
ggplot(plot_data, aes(x = Theta, y = P, color = factor(Category))) +
geom_line() +
labs(title = paste("Item Response Curve for Item", item_index),
x = expression(theta),
y = expression(P(theta))) +
theme_minimal()
}
# Example usage: Generate plots for each item in the dataset
for (i in 1:ncol(data)) {
tryCatch({
print(generate_grm_plot(model, i))
}, error = function(e) {
message("Error in generating plot for item ", i, ": ", e$message)
})
}
# Function to generate the plot for a specific item
generate_grm_plot <- function(model, item_index) {
# Extract the item response curves
item_info <- coef(model, IRTpars = TRUE, simplify = TRUE)[[item_index]]
theta <- seq(-4, 4, length.out = 100)
prob <- probtrace(model, Theta = matrix(theta, ncol = 1))
print("ggggggggggggggggggggggggggggggggggggggg", prob)
# Debugging: Check the structure of `prob`
message("Item index: ", item_index)
message("Structure of prob: ")
print(str(prob))
# Ensure that prob is in the correct format
if (!is.matrix(prob[[item_index]])) {
stop("The probability trace is not a matrix. Check the probtrace function output.")
}
plot_data <- data.frame(
Theta = rep(theta, each = ncol(prob[[item_index]])),
P = as.vector(prob[[item_index]]),
Category = rep(1:ncol(prob[[item_index]]), times = length(theta))
)
# Plot using ggplot2
ggplot(plot_data, aes(x = Theta, y = P, color = factor(Category))) +
geom_line() +
labs(title = paste("Item Response Curve for Item", item_index),
x = expression(theta),
y = expression(P(theta))) +
theme_minimal()
}
# Example usage: Generate plots for each item in the dataset
for (i in 1:ncol(data)) {
tryCatch({
print(generate_grm_plot(model, i))
}, error = function(e) {
message("Error in generating plot for item ", i, ": ", e$message)
})
}
# Function to generate the plot for a specific item
generate_grm_plot <- function(model, item_index) {
# Extract the item response curves
item_info <- coef(model, IRTpars = TRUE, simplify = TRUE)[[item_index]]
theta <- seq(-4, 4, length.out = 100)
prob <- probtrace(model, Theta = matrix(theta, ncol = 1))
print("ggggggggggggggggggggggggggggggggggggggg", prob)
# Debugging: Check the structure of `prob`
# Ensure that prob is in the correct format
if (!is.matrix(prob[[item_index]])) {
stop("The probability trace is not a matrix. Check the probtrace function output.")
}
plot_data <- data.frame(
Theta = rep(theta, each = ncol(prob[[item_index]])),
P = as.vector(prob[[item_index]]),
Category = rep(1:ncol(prob[[item_index]]), times = length(theta))
)
# Plot using ggplot2
ggplot(plot_data, aes(x = Theta, y = P, color = factor(Category))) +
geom_line() +
labs(title = paste("Item Response Curve for Item", item_index),
x = expression(theta),
y = expression(P(theta))) +
theme_minimal()
}
# Example usage: Generate plots for each item in the dataset
for (i in 1:ncol(data)) {
tryCatch({
print(generate_grm_plot(model, i))
}, error = function(e) {
message("Error in generating plot for item ", i, ": ", e$message)
})
}
# Function to generate the plot for a specific item
generate_grm_plot <- function(model, item_index) {
# Extract the item response curves
item_info <- coef(model, IRTpars = TRUE, simplify = TRUE)[[item_index]]
theta <- seq(-4, 4, length.out = 100)
prob <- probtrace(model, Theta = matrix(theta, ncol = 1))
print("ggggggggggggggggggggggggggggggggggggggg", prob)
# Debugging: Check the structure of `prob`
# Ensure that prob is in the correct format
if (!is.matrix(prob[[item_index]])) {
stop("The probability trace is not a matrix. Check the probtrace function output.")
}
plot_data <- data.frame(
Theta = rep(theta, each = ncol(prob[[item_index]])),
P = as.vector(prob[[item_index]]),
Category = rep(1:ncol(prob[[item_index]]), times = length(theta))
)
# Plot using ggplot2
ggplot(plot_data, aes(x = Theta, y = P, color = factor(Category))) +
geom_line() +
labs(title = paste("Item Response Curve for Item", item_index),
x = expression(theta),
y = expression(P(theta))) +
theme_minimal()
}
# Example usage: Generate plots for each item in the dataset
for (i in 1:ncol(data)) {
tryCatch({
print(generate_grm_plot(model, i))
}, error = function(e) {
message("Error in generating plot for item ", i, ": ")
})
}
# Function to generate the plot for a specific item
generate_grm_plot <- function(model, item_index) {
# Extract the item response curves
item_info <- coef(model, IRTpars = TRUE, simplify = TRUE)[[item_index]]
theta <- seq(-4, 4, length.out = 100)
prob <- probtrace(model, Theta = matrix(theta, ncol = 1))
# Debugging: Check the structure of `prob`
message("Item index: ", item_index)
message("Structure of prob: ")
print(str(prob))
# Ensure that prob is in the correct format
if (!is.matrix(prob[[item_index]])) {
stop("The probability trace is not a matrix. Check the probtrace function output.")
}
plot_data <- data.frame(
Theta = rep(theta, each = ncol(prob[[item_index]])),
P = as.vector(prob[[item_index]]),
Category = rep(1:ncol(prob[[item_index]]), times = length(theta))
)
# Plot using ggplot2
ggplot(plot_data, aes(x = Theta, y = P, color = factor(Category))) +
geom_line() +
labs(title = paste("Item Response Curve for Item", item_index),
x = expression(theta),
y = expression(P(theta))) +
theme_minimal()
}
# Example usage: Generate plots for each item in the dataset
for (i in 1:ncol(data)) {
tryCatch({
print(generate_grm_plot(model, i))
}, error = function(e) {
message("Error in generating plot for item ", i, ": ", e$message)
})
}
# Function to generate the plot for a specific item
generate_grm_plot <- function(model, item_index) {
# Extract the item response curves
item_info <- coef(model, IRTpars = TRUE, simplify = TRUE)[[item_index]]
theta <- seq(-4, 4, length.out = 100)
prob <- probtrace(model, Theta = matrix(theta, ncol=1))[[item_index]]
print(prob)
# Ensure that prob is in the correct format
if (!is.matrix(prob)) {
stop("The probability trace is not a matrix. Check the probtrace function output.")
}
plot_data <- data.frame(
Theta = rep(theta, each = ncol(prob)),
P = as.vector(prob),
Category = rep(1:ncol(prob), times = length(theta))
)
# Plot using ggplot2
ggplot(plot_data, aes(x = Theta, y = P, color = factor(Category))) +
geom_line() +
labs(title = paste("Item Response Curve for Item", item_index),
x = expression(theta),
y = expression(P(theta))) +
theme_minimal()
}
# Example usage: Generate plots for each item in the dataset
for (i in 1:ncol(data)) {
print(generate_grm_plot(model, i))
}
# Function to generate the plot for a specific item
generate_grm_plot <- function(model, item_index) {
# Extract the item response curves
item_info <- coef(model, IRTpars = TRUE, simplify = TRUE)[[item_index]]
theta <- seq(-4, 4, length.out = 100)
prob <- probtrace(model, Theta = matrix(theta, ncol=1))
# Debugging: Check the structure of `prob`
message("Item index: ", item_index)
message("Structure of prob: ")
print(str(prob))
# Determine the number of categories for the current item
num_categories <- ncol(item_info) - 1 # Assuming the first column is the intercept
# Subset the probability matrix for the current item
start_col <- (item_index - 1) * num_categories + 1
end_col <- start_col + num_categories - 1
# Ensure start_col and end_col are within the bounds of prob
if (start_col > ncol(prob) || end_col > ncol(prob)) {
stop("Index out of bounds. Check the item index and number of categories.")
}
prob_item <- prob[, start_col:end_col]
# Ensure that prob_item is in the correct format
if (!is.matrix(prob_item)) {
stop("The probability trace is not a matrix. Check the probtrace function output.")
}
plot_data <- data.frame(
Theta = rep(theta, each = ncol(prob_item)),
P = as.vector(prob_item),
Category = rep(1:ncol(prob_item), times = length(theta))
)
# Plot using ggplot2
ggplot(plot_data, aes(x = Theta, y = P, color = factor(Category))) +
geom_line() +
labs(title = paste("Item Response Curve for Item", item_index),
x = expression(theta),
y = expression(P(theta))) +
theme_minimal()
}
# Example usage: Generate plots for each item in the dataset
for (i in 1:ncol(data)) {
tryCatch({
print(generate_grm_plot(model, i))
}, error = function(e) {
message("Error in generating plot for item ", i, ": ", e$message)
})
}
source("~/EASY-SAPS-SANS/app/model_testing.R", echo=TRUE)
# Function to generate the plot for a specific item
generate_grm_plot <- function(model, item_index) {
theta <- seq(-4, 4, length.out = 100)
prob <- probtrace(model, Theta = matrix(theta, ncol=1))
# Debugging: Check the structure of `prob`
message("Item index: ", item_index)
message("Structure of prob: ")
print(str(prob))
# Ensure `prob` is a list and extract the correct item
if (!is.list(prob) || is.null(prob[[item_index]])) {
stop("The probability trace is not in the expected format. Check the probtrace function output.")
}
prob_item <- prob[[item_index]]
# Ensure that prob_item is in the correct format
if (!is.matrix(prob_item)) {
stop("The probability trace is not a matrix. Check the probtrace function output.")
}
plot_data <- data.frame(
Theta = rep(theta, each = ncol(prob_item)),
P = as.vector(prob_item),
Category = rep(1:ncol(prob_item), times = length(theta))
)
# Plot using ggplot2
ggplot(plot_data, aes(x = Theta, y = P, color = factor(Category))) +
geom_line() +
labs(title = paste("Item Response Curve for Item", item_index),
x = expression(theta),
y = expression(P(theta))) +
theme_minimal()
}
# Example usage: Generate plots for each item in the dataset
for (i in 1:ncol(data)) {
tryCatch({
print(generate_grm_plot(model, i))
}, error = function(e) {
message("Error in generating plot for item ", i, ": ", e$message)
})
}
source("~/EASY-SAPS-SANS/app/model_testing.R", echo=TRUE)
# Function to generate the plot for a specific item
generate_grm_plot <- function(model, item_index) {
theta <- seq(-4, 4, length.out = 100)
prob <- probtrace(model, Theta = matrix(theta, ncol=1))
# Debugging: Check the structure of `prob`
message("Item index: ", item_index)
message("Structure of prob: ")
print(str(prob))
# Extract columns for the specific item
item_cols <- grep(paste0("^Pr_SAPS_AH.P.", item_index, "$"), colnames(prob), value = TRUE)
if (length(item_cols) == 0) {
stop("The probability trace does not contain the expected columns for item ", item_index)
}
prob_item <- prob[, item_cols]
# Ensure that prob_item is in the correct format
if (!is.matrix(prob_item)) {
stop("The probability trace is not a matrix. Check the probtrace function output.")
}
plot_data <- data.frame(
Theta = rep(theta, each = ncol(prob_item)),
P = as.vector(prob_item),
Category = rep(1:ncol(prob_item), times = length(theta))
)
# Plot using ggplot2
ggplot(plot_data, aes(x = Theta, y = P, color = factor(Category))) +
geom_line() +
labs(title = paste("Item Response Curve for Item", item_index),
x = expression(theta),
y = expression(P(theta))) +
theme_minimal()
}
# Example usage: Generate plots for each item in the dataset
for (i in 1:ncol(data)) {
tryCatch({
print(generate_grm_plot(model, i))
}, error = function(e) {
message("Error in generating plot for item ", i, ": ", e$message)
})
}
# Function to generate the plot for a specific item
generate_grm_plot <- function(model, item_index) {
theta <- seq(-4, 4, length.out = 100)
prob <- probtrace(model, Theta = matrix(theta, ncol=1))
# Debugging: Check the structure of `prob`
#message("Item index: ", item_index)
#message("Structure of prob: ")
#print(str(prob))
# Extract columns for the specific item
item_cols <- grep(paste0("^Pr_SAPS_AH.P.", item_index, "$"), colnames(prob), value = TRUE)
if (length(item_cols) == 0) {
stop("The probability trace does not contain the expected columns for item ", item_index)
}
prob_item <- prob[, item_cols]
# Ensure that prob_item is in the correct format
if (!is.matrix(prob_item)) {
stop("The probability trace is not a matrix. Check the probtrace function output.")
}
plot_data <- data.frame(
Theta = rep(theta, each = ncol(prob_item)),
P = as.vector(prob_item),
Category = rep(1:ncol(prob_item), times = length(theta))
)
# Plot using ggplot2
ggplot(plot_data, aes(x = Theta, y = P, color = factor(Category))) +
geom_line() +
labs(title = paste("Item Response Curve for Item", item_index),
x = expression(theta),
y = expression(P(theta))) +
theme_minimal()
}
# Example usage: Generate plots for each item in the dataset
for (i in 1:ncol(data)) {
tryCatch({
print(generate_grm_plot(model, i))
}, error = function(e) {
message("Error in generating plot for item ", i, ": ", e$message)
})
}
# Function to generate the plot for a specific item
theta <- seq(-4, 4, length.out = 100)
prob <- probtrace(model, Theta = matrix(theta, ncol=1))
# Extract columns for the specific item
item_cols <- grep(paste0("^Pr_SAPS_AH.P.", item_index, "$"), colnames(prob), value = TRUE)
if (length(item_cols) == 0) {
print(length(item_cols)
stop("The probability trace does not contain the expected columns for item ", item_index)
# Function to generate the plot for a specific item
theta <- seq(-4, 4, length.out = 100)
prob <- probtrace(model, Theta = matrix(theta, ncol=1))
# Extract columns for the specific item
item_cols <- grep(paste0("^Pr_SAPS_AH.P.", item_index, "$"), colnames(prob), value = TRUE)
if (length(item_cols) == 0) {
print(length(item_cols)
stop("The probability trace does not contain the expected columns for item ", item_index)
# Function to generate the plot for a specific item
generate_grm_plot <- function(model, item_index) {
theta <- seq(-4, 4, length.out = 100)
prob <- probtrace(model, Theta = matrix(theta, ncol=1))
# Debugging: Check the structure of `prob`
#message("Item index: ", item_index)
#message("Structure of prob: ")
#print(str(prob))
# Extract columns for the specific item
item_cols <- grep(paste0("^Pr_SAPS_AH.P.", item_index, "$"), colnames(prob), value = TRUE)
if (length(item_cols) == 0) {
print(length(item_cols))
stop("The probability trace does not contain the expected columns for item ", item_index)
}
prob_item <- prob[, item_cols]
# Ensure that prob_item is in the correct format
if (!is.matrix(prob_item)) {
stop("The probability trace is not a matrix. Check the probtrace function output.")
}
plot_data <- data.frame(
Theta = rep(theta, each = ncol(prob_item)),
P = as.vector(prob_item),
Category = rep(1:ncol(prob_item), times = length(theta))
)
# Plot using ggplot2
ggplot(plot_data, aes(x = Theta, y = P, color = factor(Category))) +
geom_line() +
labs(title = paste("Item Response Curve for Item", item_index),
x = expression(theta),
y = expression(P(theta))) +
theme_minimal()
}
# Example usage: Generate plots for each item in the dataset
for (i in 1:ncol(data)) {
tryCatch({
print(generate_grm_plot(model, i))
}, error = function(e) {
message("Error in generating plot for item ", i, ": ", e$message)
})
}
source("~/EASY-SAPS-SANS/app/model_testing.R", echo=TRUE)
# Extract item characteristic curves
icc_data <- plot(model, type = 'trace', theta_lim = c(-6, 6), facet_items = FALSE, asTable = TRUE)
# Convert the ICC data to a data frame
icc_df <- as.data.frame(icc_data)
# Plot ICCs for each item
item_names <- colnames(data)
num_items <- length(item_names)
num_plots <- ceiling(num_items / 4)
par(mfrow = c(2, 2))
for (i in 1:num_items) {
item_data <- subset(icc_df, item == item_names[i])
plot(item_data$theta, item_data$prob, type = 'l', col = 'blue', ylim = c(0, 1), main = item_names[i], xlab = expression(theta), ylab = expression(P(theta)))
lines(item_data$theta, item_data$prob, col = 'blue')
# Move to the next plot grid if necessary
if (i %% 4 == 0 && i != num_items) {
par(mfrow = c(2, 2))
}
}
item_names <- colnames(data)
for (i in 1:length(item_names)) {
plot(model, type = 'trace', items = i, theta_lim = c(-6, 6), main = item_names[i])
# Move to the next plot grid if necessary
if (i %% 4 == 0 && i != length(item_names)) {
par(mfrow = c(2, 2))
}
}
item_names <- colnames(data)
for (i in 1:length(item_names)) {
plot(model, type = 'trace', items = i, theta_lim = c(-6, 6), main = item_names[i])
# Move to the next plot grid if necessary
if (i %% 4 == 0 && i != length(item_names)) {
par(mfrow = c(2, 2))
}
}
item_names <- colnames(data)
for (i in 1:length(item_names)) {
plot(model, type = 'trace', items = i, theta_lim = c(-6, 6), main = item_names[i])
# Move to the next plot grid if necessary
if (i %% 4 == 0 && i != length(item_names)) {
par(mfrow = c(2, 2))
}
}
par(mfrow = c(2, 2))
item_names <- colnames(data)
for (i in 1:length(item_names)) {
plot(model, type = 'trace', items = i, theta_lim = c(-6, 6), main = item_names[i])
# Move to the next plot grid if necessary
if (i %% 4 == 0 && i != length(item_names)) {
par(mfrow = c(2, 2))
}
}
item_names <- colnames(data)
for (i in 1:length(item_names)) {
plot(model, type = 'trace', items = i, theta_lim = c(-6, 6), main = item_names[i])
# Move to the next plot grid if necessary
if (i %% 4 == 0 && i != length(item_names)) {
dev.new()  # Open a new plot window
par(mfrow = c(2, 2))
}
}
# Test plotting a single item to ensure it works
plot(model, type = 'trace', items = 1, theta_lim = c(-6, 6), main = colnames(data)[1])
# Set up a 2x2 plotting area
par(mfrow = c(2, 2))
# Plot ICCs for each item
item_names <- colnames(data)
for (i in 1:length(item_names)) {
plot(model, type = 'trace', items = i, theta_lim = c(-6, 6), main = item_names[i])
# Move to the next plot grid if necessary
if (i %% 4 == 0 && i != length(item_names)) {
dev.new()  # Open a new plot window
par(mfrow = c(2, 2))
}
}
source("~/EASY-SAPS-SANS/app/model_testing.R", echo=TRUE)
